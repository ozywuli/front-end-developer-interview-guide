(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{182:function(e,t,n){"use strict";n.r(t);var a=n(0),s=Object(a.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[e._m(0),e._v(" "),n("p",[e._v("Call stack is what's processed during the event loop.\nWhen the stack is empty, JS will fill the stack with items,\nif any, from the queue. The queue is usually filled with\ncallback functions and async operations.")]),e._v(" "),e._m(1),e._v(" "),n("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube.com/embed/8aGhZQkoFbQ",frameborder:"0",allow:"autoplay; encrypted-media",allowfullscreen:""}}),e._v(" "),e._m(2),e._v(" "),n("p",[n("a",{attrs:{href:"http://latentflip.com/loupe/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://latentflip.com/loupe/"),n("OutboundLink")],1),e._v(" "),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop"),n("OutboundLink")],1)])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"what-is-event-loop-what-is-the-difference-between-call-stack-and-task-queue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#what-is-event-loop-what-is-the-difference-between-call-stack-and-task-queue","aria-hidden":"true"}},[this._v("#")]),this._v(" What is event loop? What is the difference between call stack and task queue?")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[e._v("The concurrency model is the event loop")]),e._v(" "),n("li",[e._v("it creates two queues: one for asynchronous functions, and the other for temporal functions.")]),e._v(" "),n("li",[e._v("function calls form a "),n("strong",[e._v("stack")]),e._v(" of frames\n"),n("ul",[n("li",[e._v("LIFO - last in, first out (last is the top of the stack)")]),e._v(" "),n("li",[e._v("function calls are by stacking from the bottom")]),e._v(" "),n("li",[e._v("functions in the stack are executed from top to bottom and removed along the way")])])]),e._v(" "),n("li",[e._v("Objects are allocated in a "),n("strong",[e._v("heap")]),e._v(", which is mostly unstructured region of memory")]),e._v(" "),n("li",[e._v("JS runtimes uses a message "),n("strong",[e._v("queue")])]),e._v(" "),n("li",[e._v("The event loop model never blocks")]),e._v(" "),n("li",[e._v("qualities of the JS event loop\n"),n("ul",[n("li",[e._v("single threaded")]),e._v(" "),n("li",[e._v("non-blocking")]),e._v(" "),n("li",[e._v("asynchronous")]),e._v(" "),n("li",[e._v("concurrent")])])]),e._v(" "),n("li",[e._v("properties\n"),n("ul",[n("li",[e._v("Web APIS (DOM, setTimeout, XMLHttpRequest),")]),e._v(" "),n("li",[e._v("call stack: one thread == one call stack == one thing at a time")]),e._v(" "),n("li",[e._v("callback queue")]),e._v(" "),n("li",[e._v("heap")])])]),e._v(" "),n("li",[e._v('code that runs slowly are "blocking"')]),e._v(" "),n("li",[e._v("browser can't do anything when something's blocked or stuck")]),e._v(" "),n("li",[e._v("async callbacks are non-blocking")]),e._v(" "),n("li",[e._v("JS runtime does one thing at a time but the browser is more than just the JS runtime, which means the browser can do things concurrently")]),e._v(" "),n("li",[e._v("the "),n("strong",[e._v("task queue")]),e._v(" is where async operations push their calls to be processed")]),e._v(" "),n("li",[e._v("the event loop looks at the stack and the task queue... if the stack is empty, it takes the first thing on the queue and pushes it onto the stack")]),e._v(" "),n("li",[e._v("setTimeout time is not the time until execution, it's the minimum time until execution depending on how much many other messages have been queued")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"references"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#references","aria-hidden":"true"}},[this._v("#")]),this._v(" References")])}],!1,null,null,null);t.default=s.exports}}]);