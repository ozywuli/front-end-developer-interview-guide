(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{324:function(e,a,r){"use strict";r.r(a);var t=r(0),n=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("div",{staticClass:"content"},[r("ul",[r("li",[r("code",[e._v("map")]),e._v(" and "),r("code",[e._v("forEach")]),e._v(" are built-in JS iterators. They provider a cleaner interface for creating loops for using the "),r("code",[e._v("for")]),e._v(" keyword.")])]),e._v(" "),r("h2",{attrs:{id:"map"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#map","aria-hidden":"true"}},[e._v("#")]),e._v(" map")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("map")]),e._v(" iterates over an array and executes a callback for each element in the array. The function will then return a new array.")])]),e._v(" "),r("h2",{attrs:{id:"foreach"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#foreach","aria-hidden":"true"}},[e._v("#")]),e._v(" forEach")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("forEach")]),e._v(" also iterates over an array and executes a callback for each element in the array. But the function will not return a new array. This is useful when you just want to perform a loop without the overhead of returning a new array. This is useful, for example, for saving every item in an array to a database.")])]),e._v(" "),r("h2",{attrs:{id:"the-difference"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#the-difference","aria-hidden":"true"}},[e._v("#")]),e._v(" The difference?")]),e._v(" "),r("p",[r("code",[e._v("map")]),e._v(" and "),r("code",[e._v("forEach")]),e._v(" can both be used to loop an array. You could use "),r("code",[e._v("map")]),e._v(" in every instance where you'd use "),r("code",[e._v("forEach")]),e._v(", but it'd be more performant to use "),r("code",[e._v("forEach")]),e._v(" if you can discard the transformed values.")])])}],!1,null,null,null);a.default=n.exports}}]);